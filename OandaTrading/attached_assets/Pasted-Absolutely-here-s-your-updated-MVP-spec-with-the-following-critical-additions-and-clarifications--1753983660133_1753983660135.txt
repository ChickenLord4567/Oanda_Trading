Absolutely ‚Äî here‚Äôs your updated MVP spec with the following critical additions and clarifications:
	‚Ä¢	‚úÖ Clear enforcement that all trade actions (TP1, TP2, SL, breakeven, manual close) must execute via OANDA‚Äôs live API, not just logged in MongoDB
	‚Ä¢	‚úÖ Trade instruments passed to OANDA must use underscore formatting (e.g., XAUUSD ‚Üí XAU_USD)
	‚Ä¢	‚úÖ MongoDB is for tracking only, not simulation or shadow execution
	‚Ä¢	‚úÖ Trade logic and API interaction order is preserved and enforced

‚∏ª

‚úÖ Updated MVP ‚Äî Phase 1: Web Trading App Specification (OANDA Execution + MongoDB + UI)

‚∏ª

1. Authentication

‚Ä¢ Single-user login (hardcoded credentials)
‚Ä¢ All pages and API routes are protected
‚Ä¢ If unauthenticated ‚Üí redirect to login page

‚∏ª

2. Supported Instruments

‚Ä¢ Dropdown selector:
‚Ä¢ Options: XAUUSD, EURUSD, GBPUSD, USDJPY
‚Ä¢ Default: XAUUSD
‚ö† OANDA instrument format uses underscores:
	‚Ä¢	XAUUSD ‚Üí XAU_USD
	‚Ä¢	EURUSD ‚Üí EUR_USD
	‚Ä¢	GBPUSD ‚Üí GBP_USD
	‚Ä¢	USDJPY ‚Üí USD_JPY

Backend must convert to OANDA format before API calls.

‚∏ª

3. Trading Core ‚Äì True OANDA Execution

‚Ä¢ Market orders only
‚Ä¢ Inputs from UI:
	‚Ä¢	Lot size (for XAUUSD 1 lot = 100 units and all other currencies 1 lot = 100,000)
	‚Ä¢	TP1, TP2, SL
‚Ä¢ Entry price is always live from OANDA‚Äôs ask/bid at execution
‚Ä¢ No manual entry price override allowed
‚Ä¢ Trade placed via OANDA API, not simulated
‚Ä¢ Uses: POST /v3/accounts/{accountId}/orders with type MARKET
‚Ä¢ Backend maps all fields correctly ‚Üí confirms trade ‚Üí returns trade ID
‚Ä¢ Endpoint: POST /api/place-trade

‚∏ª

4. Automated Trade Management ‚Äì Full OANDA Execution Only

‚ö† All trade logic must hit OANDA API ‚Äî not just update MongoDB.

‚úÖ Every 5 seconds (polling loop):
	1.	Fetch current price using /v3/accounts/{accountId}/pricing
	2.	Fetch open trades using /v3/accounts/{accountId}/openTrades
	3.	For each trade, apply this logic:

‚∏ª

TP1 Hit

‚Ä¢ If price ‚â• TP1 and trade not partially closed:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: 75%
‚úÖ Then call PATCH /v3/accounts/{accountId}/orders to move SL to breakeven (entry price)
‚úÖ Then update MongoDB: mark partialClosed: true, tp1Hit: true, new SL, etc.

‚∏ª

TP2 Hit

‚Ä¢ If price ‚â• TP2:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: remaining
‚úÖ Then update MongoDB: trade fully closed, profit, date, etc.

‚∏ª

SL Hit

‚Ä¢ If price ‚â§ SL:
‚úÖ Call POST /v3/accounts/{accountId}/trades/{tradeId}/close with units: all
‚úÖ Then update MongoDB: trade closed with loss

‚∏ª

Manual Close

‚Ä¢ Triggered via UI ‚Üí POST /api/close-trade
‚úÖ Uses OANDA API: POST /v3/accounts/{accountId}/trades/{tradeId}/close
‚úÖ Syncs closure to MongoDB

‚ùó Trade management logic must not simulate these events in Mongo only.
‚ùó OANDA API is always the source of truth for execution.

‚∏ª

5. Market Price Updates

‚Ä¢ Every 2 seconds, fetch live market price via OANDA
‚Ä¢ Display as:
	‚Ä¢	‚ÄúLive Entry Price: $XXXX.XX‚Äù (ask for Buy, bid for Sell)
‚Ä¢ UI does not allow user to enter entry price manually
‚Ä¢ Trade executes at live market price at moment of button click

‚∏ª

6. Analytics & Dashboard (Dark UI)

Layout

‚Ä¢ Mobile-responsive 2-column layout
‚Ä¢ Dark background, light text, PL color-coded

Left Column: Active Trades

‚Ä¢ Instrument
‚Ä¢ Direction
‚Ä¢ Entry Price
‚Ä¢ Lot Size
‚Ä¢ TP1, TP2, SL
‚Ä¢ Live P/L (calculated using OANDA price)
‚Ä¢ Account Balance (live)

Right Column: Trade History + Summary

‚Ä¢ Last 5 days:
	‚Ä¢	Entry/close prices
	‚Ä¢	P/L
‚Ä¢ Summary view:
	‚Ä¢	Total trades
	‚Ä¢	Profit summary (7d, 30d, 90d, YTD)

‚∏ª

7. Data Persistence with MongoDB Atlas

Persistence

‚Ä¢ All trades stored:
	‚Ä¢	Open, partial, closed, failed
	‚Ä¢	SL/TP history, breakeven, close reason
‚Ä¢ Used for tracking and analytics only, not trade execution
‚Ä¢ MongoDB is not the trading engine

Secure Connection Logic

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  ssl: true,
  sslValidate: false // Replit-safe
});

Retry Logic (non-blocking)

const connectWithRetry = () => {
  mongoose.connect(process.env.MONGO_URI, { ... })
    .then(() => console.log('‚úÖ MongoDB connected'))
    .catch(err => {
      console.error('‚ùå MongoDB error:', err.message);
      console.log('üîÅ Retrying in 5s...');
      setTimeout(connectWithRetry, 5000);
    });
};
connectWithRetry();

Trade Schema Example

{
  "_id": "uuid",
  "instrument": "XAUUSD",
  "direction": "buy",
  "entryPrice": 1948.25,
  "closePrice": 1952.10,
  "lotSize": 0.5,
  "tp1": 1950.00,
  "tp2": 1952.00,
  "sl": 1945.00,
  "dateOpened": "2025-07-28T12:30:00Z",
  "dateClosed": "2025-07-28T12:45:00Z",
  "profitLoss": 150.5,
  "isProfit": true,
  "isLoss": false,
  "partialClosed": true
}


‚∏ª

8. Frontend (React + TailwindCSS)

‚Ä¢ Auto-refresh every 5 seconds:
	‚Ä¢	Active trades
	‚Ä¢	OANDA prices
	‚Ä¢	Account balance

‚Ä¢ Notifications:
	‚Ä¢	‚úÖ Trade placed
	‚Ä¢	‚ö† TP1 hit ‚Üí SL moved to breakeven and 75% closed
	‚Ä¢	‚úÖ TP2 hit ‚Üí trade fully closed
	‚Ä¢	‚ùå SL hit ‚Üí trade exited

‚Ä¢ Manual close button calls backend endpoint
‚Ä¢ All prices + P/L use live OANDA data

‚∏ª

9. Backend (Node.js + Express)

.env values

OANDA_ACCOUNT_ID=101-004-35896511-001
OANDA_API_KEY=your-api-key
MONGO_URI=mongodb+srv://user:pass@cluster.mongodb.net/db?retryWrites=true&tls=true

API Endpoints
	‚Ä¢	POST /api/place-trade ‚Üí Place real trade via OANDA
	‚Ä¢	POST /api/close-trade ‚Üí Close real trade via OANDA
	‚Ä¢	GET /api/trade-status ‚Üí Return live trades from OANDA
	‚Ä¢	GET /api/account-balance ‚Üí Return live balance from OANDA
	‚Ä¢	GET /api/trade-history ‚Üí Return MongoDB history

Background Polling Loop (every 2‚Äì5s)
	‚Ä¢	Checks price
	‚Ä¢	Evaluates TP1, TP2, SL
	‚Ä¢	Executes real OANDA trade close/update calls
	‚Ä¢	Then updates MongoDB

‚∏ª

10. Security

‚Ä¢ All API keys server-side only
‚Ä¢ HTTPS enforced
‚Ä¢ All backend routes require valid session token
‚Ä¢ No trade logic on frontend
‚Ä¢ No access to credentials from UI

‚∏ª

11. Deployment

‚Ä¢ Backend: Render or Railway
‚Ä¢ Frontend: Netlify or Replit
‚Ä¢ Database: MongoDB Atlas

‚∏ª

‚ö† Deployment & Delivery Rules

‚Ä¢ Must be 100% functional
‚Ä¢ All trades must:
	‚Ä¢	Execute live via OANDA
	‚Ä¢	Reflect changes via actual API (not just Mongo updates)
‚Ä¢ Missing features = failed delivery:
	‚Ä¢	Live prices
	‚Ä¢	Real trade placement
	‚Ä¢	Breakeven and partial logic
	‚Ä¢	MongoDB persistence
	‚Ä¢	Accurate manual close
	‚Ä¢	Price/PL sync

Prompt if missing credentials:

‚ö† Missing OANDA_API_KEY. Please provide it in the .env file.

.env.example Required

OANDA_ACCOUNT_ID=101-004-35896511-001
OANDA_API_KEY=5c46f977b00b37d4e141b34211ea53b5-574392e071357e127441b5bc60c4d864
MONGO_URI=mongodb+srv://surnamnikhil:f1ZP25Re7ac4cRyR@trades.sztvbvr.mongodb.net/?retryWrites=true&w=majority&tls=true&tlsAllowInvalidCertificates=true&appName=Tradesurl


To fully lock down your MVP spec so that the AI (or developer) cannot misinterpret or forget these critical implementation rules, you should append the following ‚ÄúStrict Enforcement Rules‚Äù section to your MVP document.

These are explicit, no-excuse instructions to prevent every issue you‚Äôve mentioned ‚Äî especially credential handling, profit/loss source, OANDA trade IDs, and live execution via OANDA only (never simulated in MongoDB).

‚∏ª

‚∏ª

‚úÖ STRICT ENFORCEMENT RULES (DO NOT SKIP)

This section must be implemented exactly. Any deviation = project failure.

‚∏ª

1. üîê CREDENTIALS ENFORCEMENT (PRACTICE ACCOUNT)
	‚Ä¢	You are using OANDA‚Äôs practice account, so all API requests must use this base URL:

https://api-fxpractice.oanda.com/v3/

‚ö† Do NOT use api-fxtrade.oanda.com ‚Äî that is for real money accounts.

	‚Ä¢	Backend must throw a fatal error and refuse to start if these credentials are missing:

OANDA_API_KEY=
OANDA_ACCOUNT_ID=
MONGO_URI=

	‚Ä¢	Add this at the top of your server.js or entry file:

if (!process.env.OANDA_API_KEY || !process.env.OANDA_ACCOUNT_ID || !process.env.MONGO_URI) {
  console.error("‚ùå Missing environment variables. Please check your .env file.");
  process.exit(1);
}


‚∏ª

2. üü° TRADE PROFIT/LOSS SOURCE = OANDA ONLY
	‚Ä¢	Never calculate P/L manually using stored MongoDB prices or formulas.
	‚Ä¢	Always pull real-time unrealizedPL and realizedPL from OANDA:

GET /v3/accounts/{accountId}/openTrades
‚Üí returns:
  - unrealizedPL (active trades)
  - realizedPL (closed trades)

Use this directly for:
	‚Ä¢	Active trade P/L display
	‚Ä¢	Dashboard summaries
	‚Ä¢	Manual close reports

‚úÖ P/L is always OANDA-calculated, never guessed.

‚∏ª

3. üÜî USE OANDA TRADE ID ‚Äî NEVER INTERNAL UUID
	‚Ä¢	When a trade is created, store the tradeID returned by OANDA (from /orders or /openTrades) in MongoDB.
	‚Ä¢	Never generate your own UUID as a trade reference. This causes trade mismatch during close or updates.
	‚Ä¢	Trade schema must store oandaTradeId like this:

{
  ...
  "oandaTradeId": "12345", // required
  ...
}

Use this ID for:
	‚Ä¢	Manual close
	‚Ä¢	Partial close
	‚Ä¢	SL updates
	‚Ä¢	Trade verification

‚∏ª

4. ‚ùå MONGODB IS NOT THE TRADING ENGINE
	‚Ä¢	MongoDB is only for analytics, history, and display ‚Äî never to simulate trade behavior.
	‚Ä¢	The app must not create or ‚Äúopen‚Äù a trade in Mongo unless OANDA returns a successful confirmation from:

POST /v3/accounts/{accountId}/orders

	‚Ä¢	The app must also never simulate trade closing or profit. All logic (TP1, TP2, SL, manual close) must:
	‚Ä¢	Trigger OANDA API first
	‚Ä¢	Then update MongoDB after success

‚∏ª

5. üõë FORCE LIVE TRADE EXECUTION FOR ALL TRADE EVENTS

The following trade actions must call OANDA first, then log the result in MongoDB:

Action	Required API Call
New trade	POST /orders
TP1 hit	POST /trades/{id}/close (partial units)
TP2 hit	POST /trades/{id}/close (all units)
SL hit	POST /trades/{id}/close (all units)
Move SL to breakeven	PATCH /orders
Manual close	POST /trades/{id}/close

‚ö† Do not simulate these in code ‚Äî all execution must happen on the OANDA practice server.

‚∏ª

6. üéØ TRADE FUNCTIONALITY ENFORCEMENT CHECKLIST

For each trade, the system must support:
	‚Ä¢	‚úÖ Live entry at bid/ask via OANDA
	‚Ä¢	‚úÖ TP1 partial close + breakeven SL move
	‚Ä¢	‚úÖ TP2 full close
	‚Ä¢	‚úÖ SL full close
	‚Ä¢	‚úÖ Manual close button from UI
	‚Ä¢	‚úÖ Accurate P/L from OANDA
	‚Ä¢	‚úÖ All updates reflected live in MongoDB after OANDA confirms

‚∏ª

7. üìâ INSTRUMENT FORMAT ENFORCEMENT

You must convert instrument names to OANDA format with underscores:

function formatInstrument(symbol) {
  return symbol.slice(0, 3) + '_' + symbol.slice(3);
}

Examples:
	‚Ä¢	XAUUSD ‚Üí XAU_USD
	‚Ä¢	GBPUSD ‚Üí GBP_USD

This conversion must occur:
	‚Ä¢	Before trade placement
	‚Ä¢	Before price polling
	‚Ä¢	Before trade fetching or closure

‚ö† Never send unformatted instrument strings to OANDA ‚Äî they will be rejected.

‚∏ª

8. üßæ MONGODB TRADE FORMAT ‚Äî STRICT COMPLIANCE

All trades in MongoDB must use this format, with no deviations:

{
  "_id": "mongodb internal ID",
  "instrument": "XAUUSD",
  "direction": "buy",
  "entryPrice": 1948.25,
  "closePrice": 1952.10,
  "lotSize": 0.5,
  "tp1": 1950.00,
  "tp2": 1952.00,
  "sl": 1945.00,
  "dateOpened": "2025-07-28T12:30:00Z",
  "dateClosed": "2025-07-28T12:45:00Z",
  "profitLoss": 150.5,
  "isProfit": true,
  "isLoss": false,
  "partialClosed": true,
  "oandaTradeId": "12345"  // required
}


‚∏ª

‚úÖ Final Notes
	‚Ä¢	Failure to follow these rules leads to data inconsistency, lost trades, or misreporting.
	‚Ä¢	All trade lifecycle events must be confirmed by OANDA first, then synced to MongoDB.

‚∏ª